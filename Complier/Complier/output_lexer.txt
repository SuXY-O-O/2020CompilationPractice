CONSTTK const
INTTK int
IDENFR max
ASSIGN =
INTCON 1073741824
SEMICN ;
INTTK int
IDENFR a
LBRACK [
INTCON 1000
RBRACK ]
SEMICN ;
INTTK int
IDENFR b
LBRACK [
INTCON 1000
RBRACK ]
SEMICN ;
INTTK int
IDENFR kernelid
LBRACK [
INTCON 40
RBRACK ]
SEMICN ;
INTTK int
IDENFR myscanf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
RETURNTK return
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR myprintf
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR checkrange
LPARENT (
INTTK int
IDENFR num
RPARENT )
LBRACE {
WHILETK while
LPARENT (
IDENFR num
GRE >
IDENFR max
RPARENT )
IDENFR num
ASSIGN =
IDENFR num
MINU -
IDENFR max
SEMICN ;
WHILETK while
LPARENT (
IDENFR num
LSS <
INTCON 0
RPARENT )
IDENFR num
ASSIGN =
IDENFR num
PLUS +
IDENFR max
SEMICN ;
RETURNTK return
LPARENT (
IDENFR num
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR reduce
LPARENT (
INTTK int
IDENFR kernelid
COMMA ,
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
INTTK int
IDENFR ret
COMMA ,
IDENFR i
SEMICN ;
IFTK if
LPARENT (
IDENFR kernelid
EQL ==
INTCON 0
RPARENT )
RETURNTK return
LPARENT (
IDENFR checkrange
LPARENT (
IDENFR x
PLUS +
IDENFR y
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR kernelid
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR ret
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR max
RPARENT )
LBRACE {
IFTK if
LPARENT (
LPARENT (
LPARENT (
IDENFR x
DIV /
IDENFR i
RPARENT )
MINU -
LPARENT (
IDENFR x
DIV /
IDENFR i
RPARENT )
DIV /
INTCON 2
MULT *
INTCON 2
RPARENT )
EQL ==
LPARENT (
LPARENT (
IDENFR y
DIV /
IDENFR i
RPARENT )
MINU -
LPARENT (
IDENFR y
DIV /
IDENFR i
RPARENT )
DIV /
INTCON 2
MULT *
INTCON 2
RPARENT )
RPARENT )
IDENFR ret
ASSIGN =
IDENFR ret
MULT *
INTCON 2
SEMICN ;
ELSETK else
IDENFR ret
ASSIGN =
IDENFR ret
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MULT *
INTCON 2
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
IDENFR ret
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR kernelid
EQL ==
INTCON 2
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
IDENFR y
RPARENT )
RETURNTK return
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
ELSETK else
RETURNTK return
LPARENT (
IDENFR y
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR kernelid
EQL ==
INTCON 3
RPARENT )
LBRACE {
IDENFR ret
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR max
RPARENT )
LBRACE {
IFTK if
LPARENT (
LPARENT (
LPARENT (
IDENFR x
DIV /
IDENFR i
RPARENT )
MINU -
LPARENT (
IDENFR x
DIV /
IDENFR i
RPARENT )
DIV /
INTCON 2
MULT *
INTCON 2
RPARENT )
EQL ==
INTCON 1
RPARENT )
IDENFR ret
ASSIGN =
IDENFR ret
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
ELSETK else
LBRACE {
IFTK if
LPARENT (
LPARENT (
LPARENT (
IDENFR y
DIV /
IDENFR i
RPARENT )
MINU -
LPARENT (
IDENFR y
DIV /
IDENFR i
RPARENT )
DIV /
INTCON 2
MULT *
INTCON 2
RPARENT )
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR ret
ASSIGN =
IDENFR ret
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR ret
ASSIGN =
IDENFR ret
MULT *
INTCON 2
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
MULT *
INTCON 2
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
IDENFR ret
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR kernelid
EQL ==
INTCON 4
RPARENT )
LBRACE {
IDENFR ret
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR max
RPARENT )
LBRACE {
IFTK if
LPARENT (
LPARENT (
LPARENT (
IDENFR x
DIV /
IDENFR i
RPARENT )
MINU -
LPARENT (
IDENFR x
DIV /
IDENFR i
RPARENT )
DIV /
INTCON 2
MULT *
INTCON 2
RPARENT )
EQL ==
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
LPARENT (
LPARENT (
IDENFR y
DIV /
IDENFR i
RPARENT )
MINU -
LPARENT (
IDENFR y
DIV /
IDENFR i
RPARENT )
DIV /
INTCON 2
MULT *
INTCON 2
RPARENT )
EQL ==
INTCON 1
RPARENT )
IDENFR ret
ASSIGN =
IDENFR ret
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
ELSETK else
IDENFR ret
ASSIGN =
IDENFR ret
MULT *
INTCON 2
SEMICN ;
RBRACE }
ELSETK else
IDENFR ret
ASSIGN =
IDENFR ret
MULT *
INTCON 2
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MULT *
INTCON 2
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
IDENFR ret
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR getvalue
LPARENT (
INTTK int
IDENFR n
COMMA ,
INTTK int
IDENFR m
COMMA ,
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR y
LSS <
INTCON 0
RPARENT )
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
GEQ >=
IDENFR n
RPARENT )
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR y
GEQ >=
IDENFR m
RPARENT )
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
RETURNTK return
LPARENT (
IDENFR a
LBRACK [
IDENFR x
MULT *
IDENFR m
PLUS +
IDENFR y
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR convn
LPARENT (
INTTK int
IDENFR kernelid
COMMA ,
INTTK int
IDENFR n
COMMA ,
INTTK int
IDENFR m
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR x
COMMA ,
IDENFR y
COMMA ,
IDENFR curr
SEMICN ;
INTTK int
IDENFR flag1
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR flag2
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR flag3
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR flag4
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR flag1
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR flag2
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR curr
ASSIGN =
INTCON 0
SEMICN ;
IDENFR x
ASSIGN =
IDENFR i
MINU -
IDENFR c
DIV /
INTCON 2
SEMICN ;
WHILETK while
LPARENT (
IDENFR flag3
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR y
ASSIGN =
IDENFR j
MINU -
IDENFR c
DIV /
INTCON 2
SEMICN ;
WHILETK while
LPARENT (
IDENFR flag4
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR curr
ASSIGN =
IDENFR reduce
LPARENT (
IDENFR kernelid
COMMA ,
IDENFR curr
COMMA ,
IDENFR getvalue
LPARENT (
IDENFR n
COMMA ,
IDENFR m
COMMA ,
IDENFR x
COMMA ,
IDENFR y
RPARENT )
RPARENT )
SEMICN ;
IDENFR y
ASSIGN =
IDENFR y
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR y
GEQ >=
IDENFR j
PLUS +
IDENFR c
DIV /
INTCON 2
RPARENT )
LBRACE {
IDENFR flag4
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
RBRACE }
IDENFR flag4
ASSIGN =
INTCON 1
SEMICN ;
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR x
GEQ >=
IDENFR i
PLUS +
IDENFR c
DIV /
INTCON 2
RPARENT )
LBRACE {
IDENFR flag3
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
RBRACE }
IDENFR flag3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR b
LBRACK [
IDENFR i
MULT *
IDENFR m
PLUS +
IDENFR j
RBRACK ]
ASSIGN =
IDENFR curr
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR j
GEQ >=
IDENFR m
RPARENT )
LBRACE {
IDENFR flag2
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
RBRACE }
IDENFR flag2
ASSIGN =
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GEQ >=
IDENFR n
RPARENT )
LBRACE {
IDENFR flag1
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR mymemmove
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR n
RPARENT )
LBRACE {
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR b
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR c
COMMA ,
IDENFR n
COMMA ,
IDENFR m
COMMA ,
IDENFR task
COMMA ,
IDENFR arrLen
COMMA ,
IDENFR tmp
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR c
ASSIGN =
IDENFR myscanf
LPARENT (
RPARENT )
SEMICN ;
IDENFR n
ASSIGN =
IDENFR myscanf
LPARENT (
RPARENT )
SEMICN ;
IDENFR m
ASSIGN =
IDENFR myscanf
LPARENT (
RPARENT )
SEMICN ;
IDENFR arrLen
ASSIGN =
IDENFR myscanf
LPARENT (
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR arrLen
RPARENT )
LBRACE {
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR myscanf
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR task
ASSIGN =
IDENFR myscanf
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR task
RPARENT )
LBRACE {
IDENFR kernelid
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR myscanf
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR task
RPARENT )
LBRACE {
IDENFR convn
LPARENT (
IDENFR kernelid
LBRACK [
IDENFR i
RBRACK ]
COMMA ,
IDENFR n
COMMA ,
IDENFR m
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IDENFR mymemmove
LPARENT (
IDENFR n
MULT *
IDENFR m
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR n
MULT *
IDENFR m
RPARENT )
LBRACE {
IDENFR myprintf
LPARENT (
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
